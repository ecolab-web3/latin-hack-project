"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileWithBinary = compileWithBinary;
const child_process_1 = require("child_process");
const utils_1 = require("../utils");
const errors_1 = require("../errors");
async function compileWithBinary(input, config) {
    const { compilerPath, optimizer } = config.settings;
    const commands = (0, utils_1.extractCommands)(config);
    let optimizerSettings;
    if (optimizer?.enabled) {
        optimizerSettings = {
            mode: optimizer?.parameters,
            fallback_to_optimizing_for_size: optimizer?.fallbackOz,
            enabled: true,
            runs: optimizer?.runs,
        };
    }
    else if (optimizer?.enabled === false) {
        optimizerSettings = {
            enabled: false,
        };
    }
    const inputs = JSON.stringify({
        language: "Solidity",
        sources: input.sources,
        settings: {
            optimizer: optimizerSettings,
            outputSelection: {
                "*": {
                    "*": ["abi"],
                },
            },
        },
    });
    return new Promise((resolve, reject) => {
        const process = (0, child_process_1.spawn)(compilerPath, commands);
        let output = "";
        let error = "";
        process.stdin.write(inputs);
        process.stdin.end();
        process.stdout.on("data", (data) => {
            output += data.toString();
        });
        process.stderr.on("data", (data) => {
            error += data.toString();
        });
        process.on("close", (code) => {
            if (code === 0) {
                try {
                    const result = JSON.parse(output);
                    resolve(result);
                }
                catch {
                    reject(new errors_1.ResolcPluginError(`Failed to parse output`));
                }
            }
            else {
                reject(new errors_1.ResolcPluginError(`Process exited with code ${code}: ${error}`));
            }
        });
    });
}
//# sourceMappingURL=binary.js.map
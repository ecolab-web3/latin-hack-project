import type { CompilerInput, SolcConfig } from "hardhat/types";
export interface ResolcConfig {
    version: string;
    compilerSource?: "binary" | "npm";
    settings?: {
        basePath?: string;
        includePaths?: string[];
        allowPaths?: string;
        optimizer?: {
            enabled?: boolean;
            parameters?: "0" | "1" | "2" | "3" | "s" | "z";
            fallbackOz?: boolean;
            runs?: number;
        };
        solcPath?: string;
        debugOutputDir?: string;
        compilerPath?: string;
        contractsToCompile?: string[];
        emitDourceDebugInfo?: boolean;
    };
}
export interface ReviveCompilerInput extends CompilerInput {
    suppressedWarnings?: string[];
    suppressedErrors?: string[];
}
export interface MissingLibrary {
    contractName: string;
    contractPath: string;
    missingLibraries: string[];
}
export interface SolcConfigData {
    compiler: SolcConfig;
    file?: string;
}
export interface ContractSource {
    [key: string]: object;
}
export interface Sources {
    [key: string]: {
        id: number;
        ast: object;
    };
}

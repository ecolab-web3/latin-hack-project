/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CSA_LatinHackInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "burn"
      | "buyMembership"
      | "closeSeasonSales"
      | "createNewSeason"
      | "isApprovedForAll"
      | "owner"
      | "redeemWeeklyBox"
      | "safeTransferFrom"
      | "seasons"
      | "setApprovalForAll"
      | "transferOwnership"
      | "weeklyRedemptions"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "BoxRedeemed"
      | "MembershipPurchased"
      | "SeasonCreated"
      | "TransferSingle"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyMembership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeSeasonSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewSeason",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemWeeklyBox",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seasons",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyRedemptions",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeSeasonSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewSeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemWeeklyBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seasons", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyRedemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _operator: AddressLike,
    _approved: boolean
  ];
  export type OutputTuple = [
    _owner: string,
    _operator: string,
    _approved: boolean
  ];
  export interface OutputObject {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoxRedeemedEvent {
  export type InputTuple = [
    seasonId: BigNumberish,
    member: AddressLike,
    weekNumber: BigNumberish
  ];
  export type OutputTuple = [
    seasonId: bigint,
    member: string,
    weekNumber: bigint
  ];
  export interface OutputObject {
    seasonId: bigint;
    member: string;
    weekNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MembershipPurchasedEvent {
  export type InputTuple = [
    seasonId: BigNumberish,
    member: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [seasonId: bigint, member: string, amount: bigint];
  export interface OutputObject {
    seasonId: bigint;
    member: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeasonCreatedEvent {
  export type InputTuple = [
    seasonId: BigNumberish,
    name: string,
    price: BigNumberish,
    capacity: BigNumberish
  ];
  export type OutputTuple = [
    seasonId: bigint,
    name: string,
    price: bigint,
    capacity: bigint
  ];
  export interface OutputObject {
    seasonId: bigint;
    name: string;
    price: bigint;
    capacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    _operator: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _id: BigNumberish,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _operator: string,
    _from: string,
    _to: string,
    _id: bigint,
    _amount: bigint
  ];
  export interface OutputObject {
    _operator: string;
    _from: string;
    _to: string;
    _id: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CSA_LatinHack extends BaseContract {
  connect(runner?: ContractRunner | null): CSA_LatinHack;
  waitForDeployment(): Promise<this>;

  interface: CSA_LatinHackInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  burn: TypedContractMethod<
    [from: AddressLike, id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyMembership: TypedContractMethod<[], [void], "payable">;

  closeSeasonSales: TypedContractMethod<
    [seasonId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createNewSeason: TypedContractMethod<
    [
      seasonName: string,
      price: BigNumberish,
      capacity: BigNumberish,
      durationInWeeks: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  redeemWeeklyBox: TypedContractMethod<
    [seasonId: BigNumberish],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  seasons: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        membershipPrice: bigint;
        totalMemberships: bigint;
        soldMemberships: bigint;
        startTime: bigint;
        endTime: bigint;
        isOpenForSale: boolean;
      }
    ],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  weeklyRedemptions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [from: AddressLike, id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyMembership"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "closeSeasonSales"
  ): TypedContractMethod<[seasonId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createNewSeason"
  ): TypedContractMethod<
    [
      seasonName: string,
      price: BigNumberish,
      capacity: BigNumberish,
      durationInWeeks: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemWeeklyBox"
  ): TypedContractMethod<[seasonId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seasons"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        membershipPrice: bigint;
        totalMemberships: bigint;
        soldMemberships: bigint;
        startTime: bigint;
        endTime: bigint;
        isOpenForSale: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weeklyRedemptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BoxRedeemed"
  ): TypedContractEvent<
    BoxRedeemedEvent.InputTuple,
    BoxRedeemedEvent.OutputTuple,
    BoxRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "MembershipPurchased"
  ): TypedContractEvent<
    MembershipPurchasedEvent.InputTuple,
    MembershipPurchasedEvent.OutputTuple,
    MembershipPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "SeasonCreated"
  ): TypedContractEvent<
    SeasonCreatedEvent.InputTuple,
    SeasonCreatedEvent.OutputTuple,
    SeasonCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BoxRedeemed(uint256,address,uint256)": TypedContractEvent<
      BoxRedeemedEvent.InputTuple,
      BoxRedeemedEvent.OutputTuple,
      BoxRedeemedEvent.OutputObject
    >;
    BoxRedeemed: TypedContractEvent<
      BoxRedeemedEvent.InputTuple,
      BoxRedeemedEvent.OutputTuple,
      BoxRedeemedEvent.OutputObject
    >;

    "MembershipPurchased(uint256,address,uint256)": TypedContractEvent<
      MembershipPurchasedEvent.InputTuple,
      MembershipPurchasedEvent.OutputTuple,
      MembershipPurchasedEvent.OutputObject
    >;
    MembershipPurchased: TypedContractEvent<
      MembershipPurchasedEvent.InputTuple,
      MembershipPurchasedEvent.OutputTuple,
      MembershipPurchasedEvent.OutputObject
    >;

    "SeasonCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      SeasonCreatedEvent.InputTuple,
      SeasonCreatedEvent.OutputTuple,
      SeasonCreatedEvent.OutputObject
    >;
    SeasonCreated: TypedContractEvent<
      SeasonCreatedEvent.InputTuple,
      SeasonCreatedEvent.OutputTuple,
      SeasonCreatedEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
  };
}

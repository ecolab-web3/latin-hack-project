/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RecyclingCredits_LatinHackInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "burn"
      | "certifyAndMintBatch"
      | "creditDetails"
      | "grantCertifierRole"
      | "isApprovedForAll"
      | "isCertifier"
      | "owner"
      | "retireCredits"
      | "revokeCertifierRole"
      | "safeTransferFrom"
      | "setApprovalForAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "CertifierRoleGranted"
      | "CertifierRoleRevoked"
      | "CreditBatchCertified"
      | "CreditsRetired"
      | "TransferSingle"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "certifyAndMintBatch",
    values: [AddressLike, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCertifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCertifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retireCredits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "certifyAndMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCertifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCertifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retireCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _operator: AddressLike,
    _approved: boolean
  ];
  export type OutputTuple = [
    _owner: string,
    _operator: string,
    _approved: boolean
  ];
  export interface OutputObject {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertifierRoleGrantedEvent {
  export type InputTuple = [certifier: AddressLike];
  export type OutputTuple = [certifier: string];
  export interface OutputObject {
    certifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertifierRoleRevokedEvent {
  export type InputTuple = [certifier: AddressLike];
  export type OutputTuple = [certifier: string];
  export interface OutputObject {
    certifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditBatchCertifiedEvent {
  export type InputTuple = [
    creditId: BigNumberish,
    initialOwner: AddressLike,
    materialType: string,
    weightKg: BigNumberish,
    proofHash: BytesLike
  ];
  export type OutputTuple = [
    creditId: bigint,
    initialOwner: string,
    materialType: string,
    weightKg: bigint,
    proofHash: string
  ];
  export interface OutputObject {
    creditId: bigint;
    initialOwner: string;
    materialType: string;
    weightKg: bigint;
    proofHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditsRetiredEvent {
  export type InputTuple = [
    creditId: BigNumberish,
    retiredBy: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    creditId: bigint,
    retiredBy: string,
    amount: bigint
  ];
  export interface OutputObject {
    creditId: bigint;
    retiredBy: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    _operator: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _id: BigNumberish,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _operator: string,
    _from: string,
    _to: string,
    _id: bigint,
    _amount: bigint
  ];
  export interface OutputObject {
    _operator: string;
    _from: string;
    _to: string;
    _id: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RecyclingCredits_LatinHack extends BaseContract {
  connect(runner?: ContractRunner | null): RecyclingCredits_LatinHack;
  waitForDeployment(): Promise<this>;

  interface: RecyclingCredits_LatinHackInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  burn: TypedContractMethod<
    [from: AddressLike, id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  certifyAndMintBatch: TypedContractMethod<
    [
      creditOwner: AddressLike,
      materialType: string,
      weightKg: BigNumberish,
      location: string,
      proofHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  creditDetails: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, string] & {
        materialType: string;
        totalWeightKg: bigint;
        timestamp: bigint;
        location: string;
        proofHash: string;
      }
    ],
    "view"
  >;

  grantCertifierRole: TypedContractMethod<
    [certifier: AddressLike],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isCertifier: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  retireCredits: TypedContractMethod<
    [creditId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeCertifierRole: TypedContractMethod<
    [certifier: AddressLike],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [from: AddressLike, id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certifyAndMintBatch"
  ): TypedContractMethod<
    [
      creditOwner: AddressLike,
      materialType: string,
      weightKg: BigNumberish,
      location: string,
      proofHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditDetails"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, string] & {
        materialType: string;
        totalWeightKg: bigint;
        timestamp: bigint;
        location: string;
        proofHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantCertifierRole"
  ): TypedContractMethod<[certifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCertifier"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "retireCredits"
  ): TypedContractMethod<
    [creditId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeCertifierRole"
  ): TypedContractMethod<[certifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CertifierRoleGranted"
  ): TypedContractEvent<
    CertifierRoleGrantedEvent.InputTuple,
    CertifierRoleGrantedEvent.OutputTuple,
    CertifierRoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "CertifierRoleRevoked"
  ): TypedContractEvent<
    CertifierRoleRevokedEvent.InputTuple,
    CertifierRoleRevokedEvent.OutputTuple,
    CertifierRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "CreditBatchCertified"
  ): TypedContractEvent<
    CreditBatchCertifiedEvent.InputTuple,
    CreditBatchCertifiedEvent.OutputTuple,
    CreditBatchCertifiedEvent.OutputObject
  >;
  getEvent(
    key: "CreditsRetired"
  ): TypedContractEvent<
    CreditsRetiredEvent.InputTuple,
    CreditsRetiredEvent.OutputTuple,
    CreditsRetiredEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CertifierRoleGranted(address)": TypedContractEvent<
      CertifierRoleGrantedEvent.InputTuple,
      CertifierRoleGrantedEvent.OutputTuple,
      CertifierRoleGrantedEvent.OutputObject
    >;
    CertifierRoleGranted: TypedContractEvent<
      CertifierRoleGrantedEvent.InputTuple,
      CertifierRoleGrantedEvent.OutputTuple,
      CertifierRoleGrantedEvent.OutputObject
    >;

    "CertifierRoleRevoked(address)": TypedContractEvent<
      CertifierRoleRevokedEvent.InputTuple,
      CertifierRoleRevokedEvent.OutputTuple,
      CertifierRoleRevokedEvent.OutputObject
    >;
    CertifierRoleRevoked: TypedContractEvent<
      CertifierRoleRevokedEvent.InputTuple,
      CertifierRoleRevokedEvent.OutputTuple,
      CertifierRoleRevokedEvent.OutputObject
    >;

    "CreditBatchCertified(uint256,address,string,uint256,bytes32)": TypedContractEvent<
      CreditBatchCertifiedEvent.InputTuple,
      CreditBatchCertifiedEvent.OutputTuple,
      CreditBatchCertifiedEvent.OutputObject
    >;
    CreditBatchCertified: TypedContractEvent<
      CreditBatchCertifiedEvent.InputTuple,
      CreditBatchCertifiedEvent.OutputTuple,
      CreditBatchCertifiedEvent.OutputObject
    >;

    "CreditsRetired(uint256,address,uint256)": TypedContractEvent<
      CreditsRetiredEvent.InputTuple,
      CreditsRetiredEvent.OutputTuple,
      CreditsRetiredEvent.OutputObject
    >;
    CreditsRetired: TypedContractEvent<
      CreditsRetiredEvent.InputTuple,
      CreditsRetiredEvent.OutputTuple,
      CreditsRetiredEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BiodiversityCredits_LatinHackInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "balanceOf"
      | "burn"
      | "certifyAndMintBatch"
      | "creditBatchDetails"
      | "isApprovedForAll"
      | "projects"
      | "registerProject"
      | "retireCredits"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "updateProjectStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "CreditBatchCertified"
      | "CreditsRetired"
      | "ProjectRegistered"
      | "ProjectStatusUpdated"
      | "TransferSingle"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "certifyAndMintBatch",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditBatchDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProject",
    values: [AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retireCredits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectStatus",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "certifyAndMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditBatchDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectStatus",
    data: BytesLike
  ): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditBatchCertifiedEvent {
  export type InputTuple = [
    creditId: BigNumberish,
    projectId: BigNumberish,
    verifier: AddressLike,
    creditOwner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    creditId: bigint,
    projectId: bigint,
    verifier: string,
    creditOwner: string,
    amount: bigint
  ];
  export interface OutputObject {
    creditId: bigint;
    projectId: bigint;
    verifier: string;
    creditOwner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditsRetiredEvent {
  export type InputTuple = [
    creditId: BigNumberish,
    retiredBy: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    creditId: bigint,
    retiredBy: string,
    amount: bigint
  ];
  export interface OutputObject {
    creditId: bigint;
    retiredBy: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectRegisteredEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    developer: AddressLike,
    verifier: AddressLike
  ];
  export type OutputTuple = [
    projectId: bigint,
    developer: string,
    verifier: string
  ];
  export interface OutputObject {
    projectId: bigint;
    developer: string;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectStatusUpdatedEvent {
  export type InputTuple = [projectId: BigNumberish, newStatus: BigNumberish];
  export type OutputTuple = [projectId: bigint, newStatus: bigint];
  export interface OutputObject {
    projectId: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BiodiversityCredits_LatinHack extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): BiodiversityCredits_LatinHack;
  waitForDeployment(): Promise<this>;

  interface: BiodiversityCredits_LatinHackInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<
    [_account: AddressLike, _id: BigNumberish],
    [bigint],
    "view"
  >;

  burn: TypedContractMethod<
    [_from: AddressLike, _id: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  certifyAndMintBatch: TypedContractMethod<
    [
      _projectId: BigNumberish,
      _creditOwner: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  creditBatchDetails: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        projectId: bigint;
        timestamp: bigint;
        totalMinted: bigint;
      }
    ],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [_account: AddressLike, _operator: AddressLike],
    [boolean],
    "view"
  >;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint] & {
        developer: string;
        verifier: string;
        projectURI: string;
        methodologyHash: string;
        status: bigint;
      }
    ],
    "view"
  >;

  registerProject: TypedContractMethod<
    [_verifier: AddressLike, _projectURI: string, _methodologyHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  retireCredits: TypedContractMethod<
    [_creditId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [_operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;

  updateProjectStatus: TypedContractMethod<
    [_projectId: BigNumberish, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [_account: AddressLike, _id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [_from: AddressLike, _id: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certifyAndMintBatch"
  ): TypedContractMethod<
    [
      _projectId: BigNumberish,
      _creditOwner: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditBatchDetails"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        projectId: bigint;
        timestamp: bigint;
        totalMinted: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [_account: AddressLike, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint] & {
        developer: string;
        verifier: string;
        projectURI: string;
        methodologyHash: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerProject"
  ): TypedContractMethod<
    [_verifier: AddressLike, _projectURI: string, _methodologyHash: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retireCredits"
  ): TypedContractMethod<
    [_creditId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [_operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProjectStatus"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CreditBatchCertified"
  ): TypedContractEvent<
    CreditBatchCertifiedEvent.InputTuple,
    CreditBatchCertifiedEvent.OutputTuple,
    CreditBatchCertifiedEvent.OutputObject
  >;
  getEvent(
    key: "CreditsRetired"
  ): TypedContractEvent<
    CreditsRetiredEvent.InputTuple,
    CreditsRetiredEvent.OutputTuple,
    CreditsRetiredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectRegistered"
  ): TypedContractEvent<
    ProjectRegisteredEvent.InputTuple,
    ProjectRegisteredEvent.OutputTuple,
    ProjectRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectStatusUpdated"
  ): TypedContractEvent<
    ProjectStatusUpdatedEvent.InputTuple,
    ProjectStatusUpdatedEvent.OutputTuple,
    ProjectStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CreditBatchCertified(uint256,uint256,address,address,uint256)": TypedContractEvent<
      CreditBatchCertifiedEvent.InputTuple,
      CreditBatchCertifiedEvent.OutputTuple,
      CreditBatchCertifiedEvent.OutputObject
    >;
    CreditBatchCertified: TypedContractEvent<
      CreditBatchCertifiedEvent.InputTuple,
      CreditBatchCertifiedEvent.OutputTuple,
      CreditBatchCertifiedEvent.OutputObject
    >;

    "CreditsRetired(uint256,address,uint256)": TypedContractEvent<
      CreditsRetiredEvent.InputTuple,
      CreditsRetiredEvent.OutputTuple,
      CreditsRetiredEvent.OutputObject
    >;
    CreditsRetired: TypedContractEvent<
      CreditsRetiredEvent.InputTuple,
      CreditsRetiredEvent.OutputTuple,
      CreditsRetiredEvent.OutputObject
    >;

    "ProjectRegistered(uint256,address,address)": TypedContractEvent<
      ProjectRegisteredEvent.InputTuple,
      ProjectRegisteredEvent.OutputTuple,
      ProjectRegisteredEvent.OutputObject
    >;
    ProjectRegistered: TypedContractEvent<
      ProjectRegisteredEvent.InputTuple,
      ProjectRegisteredEvent.OutputTuple,
      ProjectRegisteredEvent.OutputObject
    >;

    "ProjectStatusUpdated(uint256,uint8)": TypedContractEvent<
      ProjectStatusUpdatedEvent.InputTuple,
      ProjectStatusUpdatedEvent.OutputTuple,
      ProjectStatusUpdatedEvent.OutputObject
    >;
    ProjectStatusUpdated: TypedContractEvent<
      ProjectStatusUpdatedEvent.InputTuple,
      ProjectStatusUpdatedEvent.OutputTuple,
      ProjectStatusUpdatedEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
  };
}
